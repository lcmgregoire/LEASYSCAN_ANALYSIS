library("statgenHTP")
library("platformDataAnalysis")
library("ggplot2")
library("lubridate")
# define reference WD
ref_wd <- "C:/Users/2021lg003/Documents/Sorghum/Experiments/EXP_INDE_2023/ANALYSIS_ALL_DATASET/LSpipeline/data"
# data preparation ----
# PE data
setwd('C:/Users/2021lg003/Documents/Sorghum/Experiments/EXP_INDE_2023/DATASET/FULL_DATASET')
pe_data <- read.csv(file = 'Exp60 Sorghum Ref set IRD Trial Sep 2023-477 mm_20231027_planteye.csv', sep = ";")
#
#pe_data <- rbind(data, data2, data3, data4)
# rm(data, data2, data3, data4)
# LC data
setwd('C:/Users/2021lg003/Documents/Sorghum/Experiments/EXP_INDE_2023/DATASET/FULL_DATASET')
lc_data <- read.csv(file = 'Exp60 Sorghum Ref set IRD Trial Sep 2023-477 mm_20231027_DroughtSpotter.csv', sep = ";")
# exp design
setwd('C:/Users/2021lg003/Documents/Sorghum/Experiments/EXP_INDE_2023/DATASET/FULL_DATASET')
d_design <- read.csv(file = "Exp60_design_info.csv", sep = ";")
d_design <- d_design %>% select(row.psx, col.psx, rep, block, geno_id)
d_exp<-d_design
# select a small subset
#d_des_s <- d_design %>% filter(row.psx %in% 3:6, col.psx %in% 1:12)
#d_des_s <- d_design %>% filter(row.psx %in% 1:3, col.psx %in% 1:12) ##work on the row 1-3 , the whole column
#d_exp <- d_des_s
# save data
setwd(ref_wd)
save(d_exp, file = "exp_des.RData")
## to see how it looks like :
load(file = "exp_des.RData")
# convert the row and columns in reference system: col.psx -> row
# row.psx -> col + 2 (the indice depend from where we start here A1 and A2 are skipped)
d_exp$rowNum <- d_exp$col.psx
d_exp$colNum <- d_exp$row.psx + 2
d_exp$plotId <- paste0(paste0("c", d_exp$colNum), paste0("r", d_exp$rowNum))
# add the sector id to the experimental design
setwd("C:/Users/2021lg003/Documents/Sorghum/Experiments/EXP_INDE_2023/ANALYSIS_ALL_DATASET/LSpipeline/data")
load(file = "unit_row_col_block.RData")
#d_unit=read.csv("sector.csv", sep = ";")
d_unit <- d_unit_row_col_block[, c(2:4, 8)]
d_exp <- left_join(x = d_exp, y =  d_unit, by = "plotId")
d_exp$new_unit= d_exp$new_unit.x ### if duplication of new.unit column
# subset pe, lc, weather, and sensor data
pe_data_s <- pe_data[pe_data$unit %in% d_exp$new_unit, ]
# check genotypes correspond to the experimental design
substr(unique(pe_data_s$genotype), 11, nchar(unique(pe_data_s$genotype)))
pe_data <- pe_data_s
lc_data_s <- lc_data[lc_data$unit %in% d_exp$new_unit, ]
unique(lc_data_s$unit)
lc_data <- lc_data_s
# weather data
setwd('C:/Users/2021lg003/Documents/Sorghum/Experiments/EXP_INDE_2023/DATASET/FULL_DATASET')
wth_data <- read.csv(file = 'Exp60 Sorghum Ref set IRD Trial Sep 2023-477 mm_20231027_Climate Datalogger.csv')
# sensor unit map
setwd('C:/Users/2021lg003/Documents/Sorghum/Experiments/EXP_INDE_2023/DATASET/FULL_DATASET')
sensor_data <- read.csv(file = 'Exp60 Sorghum Ref set IRD Trial Sep 2023-477 mm_20231027_sensorUnitMap.csv')
# select a subset of the sensor data through unit present in the design
sensor_data <- sensor_data[sensor_data$unit %in% d_exp$new_unit, ]
# subset the weather data given the unique sensor
wth_data <- wth_data[wth_data$sensor %in% unique(sensor_data$sensor), ]
# save data
setwd(ref_wd)
save(pe_data, file = "pe_data.RData")
save(lc_data, file = "lc_data.RData")
save(sensor_data, file = "sensor_data.RData")
save(wth_data, file = "weather_data.RData")
library("devtools")
#install_github("ICRISAT-GEMS/LoadCellDataProcessing", force = TRUE)
#install_github("ICRISAT-GEMS/platformDataAnalysis", force = TRUE)
library("dplyr")
library("LoadCellDataProcessing")
library("statgenHTP")
library("platformDataAnalysis")
library("ggplot2")
library("lubridate")
# define reference WD
ref_wd <- "C:/Users/2021lg003/Documents/Sorghum/Experiments/EXP_INDE_2023/ANALYSIS_ALL_DATASET/LSpipeline/data"
#######################################
library("devtools")
#install_github("ICRISAT-GEMS/LoadCellDataProcessing", force = TRUE)
#install_github("ICRISAT-GEMS/platformDataAnalysis", force = TRUE)
library("dplyr")
library("LoadCellDataProcessing")
library("statgenHTP")
library("platformDataAnalysis")
library("ggplot2")
library("lubridate")
# define reference WD
ref_wd <- "C:/Users/2021lg003/Documents/Sorghum/Experiments/EXP_INDE_2023/ANALYSIS_ALL_DATASET/LSpipeline/data"
# data preparation ----
# PE data
setwd('C:/Users/2021lg003/Documents/Sorghum/Experiments/EXP_INDE_2023/DATASET/FULL_DATASET')
pe_data <- read.csv(file = 'Exp60 Sorghum Ref set IRD Trial Sep 2023-477 mm_20231027_planteye.csv', sep = ";")
#
#pe_data <- rbind(data, data2, data3, data4)
# rm(data, data2, data3, data4)
# LC data
setwd('C:/Users/2021lg003/Documents/Sorghum/Experiments/EXP_INDE_2023/DATASET/FULL_DATASET')
lc_data <- read.csv(file = 'Exp60 Sorghum Ref set IRD Trial Sep 2023-477 mm_20231027_DroughtSpotter.csv', sep = ";")
# exp design
setwd('C:/Users/2021lg003/Documents/Sorghum/Experiments/EXP_INDE_2023/DATASET/FULL_DATASET')
d_design <- read.csv(file = "Exp60_design_info.csv", sep = ";")
d_design <- d_design %>% select(row.psx, col.psx, rep, block, geno_id)
d_exp<-d_design
# save data
setwd(ref_wd)
save(d_exp, file = "exp_des.RData")
## to see how it looks like :
load(file = "exp_des.RData")
# convert the row and columns in reference system: col.psx -> row
# row.psx -> col + 2 (the indice depend from where we start here A1 and A2 are skipped)
d_exp$rowNum <- d_exp$col.psx
d_exp$colNum <- d_exp$row.psx + 2
d_exp$plotId <- paste0(paste0("c", d_exp$colNum), paste0("r", d_exp$rowNum))
# add the sector id to the experimental design
setwd("C:/Users/2021lg003/Documents/Sorghum/Experiments/EXP_INDE_2023/ANALYSIS_ALL_DATASET/LSpipeline/data")
load(file = "unit_row_col_block.RData")
#d_unit=read.csv("sector.csv", sep = ";")
d_unit <- d_unit_row_col_block[, c(2:4, 8)]
d_exp <- left_join(x = d_exp, y =  d_unit, by = "plotId")
d_exp$new_unit= d_exp$new_unit.x ### if duplication of new.unit column
# subset pe, lc, weather, and sensor data
pe_data_s <- pe_data[pe_data$unit %in% d_exp$new_unit, ]
load(file = "unit_row_col_block.RData")
View(d_unit_row_col_block)
d_unit <- d_unit_row_col_block[, c(2:4, 8)]
d_exp <- left_join(x = d_exp, y =  d_unit, by = "plotId")
pe_data_s <- pe_data[pe_data$unit %in% d_exp$new_unit, ]
# check genotypes correspond to the experimental design
substr(unique(pe_data_s$genotype), 11, nchar(unique(pe_data_s$genotype)))
pe_data <- pe_data_s
lc_data_s <- lc_data[lc_data$unit %in% d_exp$new_unit, ]
unique(lc_data_s$unit)
lc_data <- lc_data_s
# weather data
setwd('C:/Users/2021lg003/Documents/Sorghum/Experiments/EXP_INDE_2023/DATASET/FULL_DATASET')
wth_data <- read.csv(file = 'Exp60 Sorghum Ref set IRD Trial Sep 2023-477 mm_20231027_Climate Datalogger.csv')
# sensor unit map
setwd('C:/Users/2021lg003/Documents/Sorghum/Experiments/EXP_INDE_2023/DATASET/FULL_DATASET')
sensor_data <- read.csv(file = 'Exp60 Sorghum Ref set IRD Trial Sep 2023-477 mm_20231027_sensorUnitMap.csv')
# select a subset of the sensor data through unit present in the design
sensor_data <- sensor_data[sensor_data$unit %in% d_exp$new_unit, ]
# subset the weather data given the unique sensor
wth_data <- wth_data[wth_data$sensor %in% unique(sensor_data$sensor), ]
# save data
setwd(ref_wd)
save(pe_data, file = "pe_data.RData")
save(lc_data, file = "lc_data.RData")
save(sensor_data, file = "sensor_data.RData")
save(wth_data, file = "weather_data.RData")
# load data
setwd(ref_wd)
load(file = "exp_des.RData")
load(file = "pe_data.RData")
load(file = "lc_data.RData")
load(file = "sensor_data.RData")
load(file = "weather_data.RData")
# starting point: experimental design: list of genotype, positions (row, col), ...
head(d_exp)
# convert the row and columns in reference system: col.psx -> row
# row.psx -> col + 2 (the indice depend from where we start here A1 and A2 are skipped)
d_exp$rowNum <- d_exp$col.psx
d_exp$colNum <- d_exp$row.psx + 2
d_exp$plotId <- paste0(paste0("c", d_exp$colNum), paste0("r", d_exp$rowNum))
# reference data with conversion sector id given row and column position
load(file = "unit_row_col_block.RData")
# # ajouter row and col info
# d_exp_test$rowNum <- LS_new_unit_row_lk[d_exp_test$unit]
# d_exp_test$colNum <- LS_new_unit_col_lk[d_exp_test$unit]
d_unit <- d_unit_row_col_block[, c(2:4, 8)]
d_exp <- left_join(x = d_exp, y =  d_unit, by = "plotId")
# filter pe_data using exp_des unit information
pe_data <- pe_data[pe_data$unit %in% d_exp$new_unit, ]
genotype <- strsplit(x = pe_data$genotype, split = '_')
geno_n_pieces <- unlist(lapply(X = genotype, FUN = length))
table(geno_n_pieces)
geno_vec <- unlist(lapply(X = genotype, FUN = `[[`, 3))
unique(geno_vec)
table(geno_vec)
# geno_vec[geno_vec == ""] <- NA
pe_data$genotype <- geno_vec
# filter lc_data using exp_des unit information
lc_data <- lc_data[lc_data$unit %in% d_exp$new_unit, ]
# add a genotype column using exp design sector genotype look_up
geno_lk <- d_exp$geno_id
names(geno_lk) <- d_exp$new_unit
lc_data$genotype <- lc_data$g_alias <- geno_lk[lc_data$unit]
# select a subset of the sensor data through unit present in the design
sensor_data <- sensor_data[sensor_data$unit %in% d_exp$new_unit, ]
# subset the weather data given the unique sensor
wth_data <- wth_data[wth_data$sensor %in% unique(sensor_data$sensor), ]
# save the data
setwd(ref_wd)
save(d_exp, file = "exp_des_filtered.RData")
save(pe_data, file = "pe_data_filtered.RData")
save(lc_data, file = "lc_data_filtered.RData")
save(sensor_data, file = "sensor_data_filtered.RData")
save(wth_data, file = "weather_data_filtered.RData")
setwd(ref_wd)
load(file = "pe_data_filtered.RData")
load(file = "lc_data_filtered.RData")
load(file = "sensor_data_filtered.RData")
load(file = "weather_data_filtered.RData")
# PE_data
pe_data <- pe_data %>% select(unit, genotype, timestamp, Leaf.area..mm..)
pe_data$replicate <- NA
colnames(pe_data) <- c('sector', 'genotype', 'timestamp', 'leaf_area', 'replicate')
col_names <- c("sector", "genotype", "replicate", "timestamp", "leaf_area")
pe_data <- pe_data[, col_names]
lc_data <- lc_data[lc_data$variable == "Weight g", ]
save(lc_data, file = "lc_data_filtered.RData")
load(file = "lc_data_filtered.RData")
load(file = "lc_data_filtered.RData")
lc_data <- lc_data[lc_data$unit %in% d_exp$new_unit, ]
load(file = "lc_data.RData")
# geno_vec[geno_vec == ""] <- NA
pe_data$genotype <- geno_vec
# review the genotype name check using d_exp as reference and link through unit.
# filter lc_data using exp_des unit information
lc_data <- lc_data[lc_data$unit %in% d_exp$new_unit, ]
# add a genotype column using exp design sector genotype look_up
geno_lk <- d_exp$geno_id
names(geno_lk) <- d_exp$new_unit
lc_data$genotype <- lc_data$g_alias <- geno_lk[lc_data$unit]
# select a subset of the sensor data through unit present in the design
sensor_data <- sensor_data[sensor_data$unit %in% d_exp$new_unit, ]
# subset the weather data given the unique sensor
wth_data <- wth_data[wth_data$sensor %in% unique(sensor_data$sensor), ]
# save the data
setwd(ref_wd)
save(d_exp, file = "exp_des_filtered.RData")
save(pe_data, file = "pe_data_filtered.RData")
save(lc_data, file = "lc_data_filtered.RData")
save(sensor_data, file = "sensor_data_filtered.RData")
save(wth_data, file = "weather_data_filtered.RData")
# PE_data
pe_data <- pe_data %>% select(unit, genotype, timestamp, Leaf.area..mm..)
load("D:/SAVE_14_11_2023/Documents/LSpipelineToyExample/data/lc_data_filtered.RData")
TEMPLATE_LC=load("D:/SAVE_14_11_2023/Documents/LSpipelineToyExample/data/lc_data_filtered.RData")
View(lc_data)
load(file = "lc_data_filtered.RData")
lc_data <- lc_data %>% rename(`Mass..g` = Weight.g, sector = unit)
lc_col_name <- c("sector", "genotype", "g_alias", "treatment", "timestamp", "Mass..g")
lc_data <- lc_data[, lc_col_name]
# sensor data
sensor_data <- sensor_data[, 1:2]
colnames(sensor_data) <- c("sector", "sensor")
# modify few climatic variable name to be exactly as in the example
wth_data$variable[wth_data$variable == "Relative Humidity (%)"] <- "Relative humidity (%)"
wth_data$variable[wth_data$variable == "Solar Radiation (W/(s*m2))"] <- "Solar radiation (W/(s*m²))"
wth_data$variable[wth_data$variable == "Wind Direction (°)"] <- "Wind direction (°)"
unique(wth_data$variable)
# save the data
setwd(ref_wd)
save(pe_data, file = "pe_data_processed.RData")
save(lc_data, file = "lc_data_processed.RData")
save(sensor_data, file = "sensor_data_processed.RData")
save(wth_data, file = "weather_data_processed.RData")
# load data
setwd(ref_wd)
load(file = "pe_data_processed.RData")
load(file = "lc_data_processed.RData")
load(file = "sensor_data_processed.RData")
load(file = "weather_data_processed.RData")
getwd()
t1 <- Sys.time()
TR_res <- TR_data_proc(lc_data = lc_data, pe_data = pe_data,
wth_data = wth_data, sensor_data = sensor_data,
lastDate = NULL, skew_test = FALSE,
LAI_correction = FALSE)
#Error in check_timestamp_format(d$timestamp) :
#The date in the vector do not all match the %Y-%m-%d %H:%M:%S format:
lc_data$timestamp<-lubridate::dmy_hm(lc_data$timestamp)
wth_data$timestamp<-lubridate::ymd_hm(wth_data$timestamp)
load(file = "weather_data_filtered.RData")
sensor data
# sensor data
sensor_data <- sensor_data[, 1:2]
colnames(sensor_data) <- c("sector", "sensor")
# weather data
# modify few climatic variable name to be exactly as in the example
wth_data$variable[wth_data$variable == "Relative Humidity (%)"] <- "Relative humidity (%)"
wth_data$variable[wth_data$variable == "Solar Radiation (W/(s*m2))"] <- "Solar radiation (W/(s*m²))"
wth_data$variable[wth_data$variable == "Wind Direction (°)"] <- "Wind direction (°)"
wth_data$timestamp<-lubridate::ymd_hms(wth_data$timestamp)
pe_data$timestamp<-lubridate::dmy_hm(pe_data$timestamp)
# save the data
setwd(ref_wd)
save(pe_data, file = "pe_data_processed.RData")
save(lc_data, file = "lc_data_processed.RData")
save(sensor_data, file = "sensor_data_processed.RData")
save(wth_data, file = "weather_data_processed.RData")
# load data
setwd(ref_wd)
load(file = "pe_data_processed.RData")
load(file = "lc_data_processed.RData")
load(file = "sensor_data_processed.RData")
load(file = "weather_data_processed.RData")
t1 <- Sys.time()
TR_res <- TR_data_proc(lc_data = lc_data, pe_data = pe_data,
wth_data = wth_data, sensor_data = sensor_data,
lastDate = NULL, skew_test = FALSE,
LAI_correction = FALSE)
setwd(ref_wd)
load(file = "pe_data_filtered.RData")
load(file = "lc_data_filtered.RData")
load(file = "sensor_data_filtered.RData")
load(file = "weather_data_filtered.RData")
# PE_data
pe_data <- pe_data %>% select(unit, genotype, timestamp, Leaf.area..mm..)
#Error in check_timestamp_format(d$timestamp) :
#The date in the vector do not all match the %Y-%m-%d %H:%M:%S format:
lc_data$timestamp<-lubridate::dmy_hm(lc_data$timestamp)
# sensor data
sensor_data <- sensor_data[, 1:2]
colnames(sensor_data) <- c("sector", "sensor")
# weather data
# modify few climatic variable name to be exactly as in the example
wth_data$variable[wth_data$variable == "Relative Humidity (%)"] <- "Relative humidity (%)"
wth_data$variable[wth_data$variable == "Solar Radiation (W/(s*m2))"] <- "Solar radiation (W/(s*m²))"
wth_data$variable[wth_data$variable == "Wind Direction (°)"] <- "Wind direction (°)"
wth_data$timestamp<-lubridate::ymd_hms(wth_data$timestamp)
unique(wth_data$variable)
# save the data
setwd(ref_wd)
save(pe_data, file = "pe_data_processed.RData")
save(lc_data, file = "lc_data_processed.RData")
save(sensor_data, file = "sensor_data_processed.RData")
save(wth_data, file = "weather_data_processed.RData")
# LC pipeline: TR feature data extraction (TR_data_proc) ----
# load data
setwd(ref_wd)
load(file = "pe_data_processed.RData")
load(file = "lc_data_processed.RData")
load(file = "sensor_data_processed.RData")
load(file = "weather_data_processed.RData")
t1 <- Sys.time()
TR_res <- TR_data_proc(lc_data = lc_data, pe_data = pe_data,
wth_data = wth_data, sensor_data = sensor_data,
lastDate = NULL, skew_test = FALSE,
LAI_correction = FALSE)
save(lc_data, file = "lc_data_filtered.RData")
load("D:/SAVE_14_11_2023/Documents/LSpipelineToyExample/data/lc_data_filtered.RData")
# load data
setwd(ref_wd)
load(file = "exp_des.RData")
load(file = "pe_data.RData")
load(file = "lc_data.RData")
load(file = "sensor_data.RData")
load(file = "weather_data.RData")
# starting point: experimental design: list of genotype, positions (row, col), ...
head(d_exp)
# need to add unit (sector) identifiers if not present in the design sheet
# convert the row and columns in reference system: col.psx -> row
# row.psx -> col + 2 (the indice depend from where we start here A1 and A2 are skipped)
d_exp$rowNum <- d_exp$col.psx
d_exp$colNum <- d_exp$row.psx + 2
d_exp$plotId <- paste0(paste0("c", d_exp$colNum), paste0("r", d_exp$rowNum))
# reference data with conversion sector id given row and column position
load(file = "unit_row_col_block.RData")
d_unit <- d_unit_row_col_block[, c(2:4, 8)]
d_exp <- left_join(x = d_exp, y =  d_unit, by = "plotId")
# filter pe_data using exp_des unit information
pe_data <- pe_data[pe_data$unit %in% d_exp$new_unit, ]
# format the genotype data (match further with other data)
genotype <- strsplit(x = pe_data$genotype, split = '_')
geno_n_pieces <- unlist(lapply(X = genotype, FUN = length))
table(geno_n_pieces)
geno_vec <- unlist(lapply(X = genotype, FUN = `[[`, 3))
unique(geno_vec)
table(geno_vec)
# geno_vec[geno_vec == ""] <- NA
pe_data$genotype <- geno_vec
# review the genotype name check using d_exp as reference and link through unit.
# filter lc_data using exp_des unit information
lc_data <- lc_data[lc_data$unit %in% d_exp$new_unit, ]
# add a genotype column using exp design sector genotype look_up
geno_lk <- d_exp$geno_id
names(geno_lk) <- d_exp$new_unit
lc_data$genotype <- lc_data$g_alias <- geno_lk[lc_data$unit]
View(sensor_data)
View(wth_data)
# select a subset of the sensor data through unit present in the design
sensor_data <- sensor_data[sensor_data$unit %in% d_exp$new_unit, ]
# subset the weather data given the unique sensor
wth_data <- wth_data[wth_data$sensor %in% unique(sensor_data$sensor), ]
View(wth_data)
# save the data
setwd(ref_wd)
save(d_exp, file = "exp_des_filtered.RData")
save(pe_data, file = "pe_data_filtered.RData")
save(lc_data, file = "lc_data_filtered.RData")
save(sensor_data, file = "sensor_data_filtered.RData")
save(wth_data, file = "weather_data_filtered.RData")
pe_data <- pe_data %>% select(unit, genotype, timestamp, Leaf.area..mm..)
pe_data$replicate <- NA
colnames(pe_data) <- c('sector', 'genotype', 'timestamp', 'leaf_area', 'replicate')
col_names <- c("sector", "genotype", "replicate", "timestamp", "leaf_area")
pe_data <- pe_data[, col_names]
lc_data<-data.frame(c(lc_data$unit, lc_data$sensor, lc_data$Weight.g))
# LC data
# required format: sector, genotype, g_alias, treatment, timestamp, Mass..g
#lc_data <- lc_data[lc_data$variable == "Weight.g", ] ###!! irrigation and weight are not mixed in variable anymore !!
#lc_data$treatment <- NA
lc_data<-data.frame(lc_data$unit, lc_data$sensor, lc_data$Weight.g)
lc_data<-data.frame(lc_data$unit, lc_data$sensor, lc_data$Weight.g)
lc_data_s$unit
# LC data
# required format: sector, genotype, g_alias, treatment, timestamp, Mass..g
#lc_data <- lc_data[lc_data$variable == "Weight.g", ] ###!! irrigation and weight are not mixed in variable anymore !!
#lc_data$treatment <- NA
lc_data<-c(lc_data_s$unit, lc_data_s$sensor, lc_data_s$variable,lc_data_s$timestamp, lc_data_s$value, lc_data_s$genotype, lc_data_s$g_alias)
# LC data
# required format: sector, genotype, g_alias, treatment, timestamp, Mass..g
#lc_data <- lc_data[lc_data$variable == "Weight.g", ] ###!! irrigation and weight are not mixed in variable anymore !!
#lc_data$treatment <- NA
lc_data<-data.frame(lc_data_s$unit, lc_data_s$sensor, lc_data_s$variable,lc_data_s$timestamp, lc_data_s$value, lc_data_s$genotype, lc_data_s$g_alias)
# LC data
# required format: sector, genotype, g_alias, treatment, timestamp, Mass..g
#lc_data <- lc_data[lc_data$variable == "Weight.g", ] ###!! irrigation and weight are not mixed in variable anymore !!
#lc_data$treatment <- NA
lc_data<-data.frame(lc_data_s$unit, lc_data_s$sensor, 1:nrow(lc_data_s),lc_data_s$timestamp, lc_data_s$value, lc_data_s$genotype, lc_data_s$g_alias)
1:nrow(lc_data_s)
# LC data
# required format: sector, genotype, g_alias, treatment, timestamp, Mass..g
#lc_data <- lc_data[lc_data$variable == "Weight.g", ] ###!! irrigation and weight are not mixed in variable anymore !!
#lc_data$treatment <- NA
lc_data<-cbind(lc_data_s$unit, lc_data_s$sensor)
# LC data
# required format: sector, genotype, g_alias, treatment, timestamp, Mass..g
#lc_data <- lc_data[lc_data$variable == "Weight.g", ] ###!! irrigation and weight are not mixed in variable anymore !!
#lc_data$treatment <- NA
lc_data<-cbind(lc_data_s$unit, lc_data_s$sensor, 1:nrow(lc_data_s))
# LC data
# required format: sector, genotype, g_alias, treatment, timestamp, Mass..g
#lc_data <- lc_data[lc_data$variable == "Weight.g", ] ###!! irrigation and weight are not mixed in variable anymore !!
#lc_data$treatment <- NA
lc_data<-cbind(lc_data_s$unit, lc_data_s$sensor, NA)
# LC data
# required format: sector, genotype, g_alias, treatment, timestamp, Mass..g
#lc_data <- lc_data[lc_data$variable == "Weight.g", ] ###!! irrigation and weight are not mixed in variable anymore !!
#lc_data$treatment <- NA
lc_data<-cbind(lc_data_s$unit, lc_data_s$sensor, NA, lc_data_s$timestamp, lc_data_s$Weight.g, lc_data_s$g_alias, lc_data_s$genotype)
colnames(lc_data)<-c("unit","sensor", "variable","timestamp","value","g_alias","genotype")
lc_data<-cbind(lc_data_s$unit, lc_data_s$sensor, NA, lc_data_s$timestamp, lc_data_s$Weight.g, lc_data_s$g_alias, lc_data_s$genotype)
lc_data<-as.data.frame(lc_data)
colnames(lc_data)<-c("unit","sensor", "variable","timestamp","value","g_alias","genotype")
lc_data$variable<-"Weight g"
View(lc_data)
lc_data <- lc_data %>% rename(`Mass..g` = variable, sector = unit)
lc_col_name <- c("sector", "genotype", "g_alias", "treatment", "timestamp", "Mass..g")
lc_data <- lc_data[, lc_col_name]
TR_res <- TR_data_proc(lc_data = lc_data, pe_data = pe_data,
wth_data = wth_data, sensor_data = sensor_data,
lastDate = NULL, skew_test = FALSE,
LAI_correction = FALSE)
View(lc_data)
lc_col_name <- c("sector", "genotype", "g_alias", "treatment", "timestamp", "Mass..g")
lc_data <- lc_data[, lc_col_name]
lc_col_name
colnames(lc_data)
lc_data[, lc_col_name]
lc_data$treatment<-NA
lc_data <- lc_data %>% rename(`Mass..g` = variable, sector = unit)
lc_col_name <- c("sector", "genotype", "g_alias", "treatment", "timestamp", "Mass..g")
lc_data <- lc_data[, lc_col_name]
TR_res <- TR_data_proc(lc_data = lc_data, pe_data = pe_data,
wth_data = wth_data, sensor_data = sensor_data,
lastDate = NULL, skew_test = FALSE,
LAI_correction = FALSE)
lc_data$timestamp<-lubridate::dmy_hm(lc_data$timestamp)
wth_data$timestamp<-lubridate::ymd_hms(wth_data$timestamp)
lc_data$treatment<-lc_data_s$treatment
lc_col_name <- c("sector", "genotype", "g_alias", "treatment", "timestamp", "Mass..g")
lc_data <- lc_data[, lc_col_name]
pe_data$timestamp<-lubridate::dmy_hm(pe_data$timestamp)
TR_res <- TR_data_proc(lc_data = lc_data, pe_data = pe_data,
wth_data = wth_data, sensor_data = sensor_data,
lastDate = NULL, skew_test = FALSE,
LAI_correction = FALSE)
# sensor data
sensor_data <- sensor_data[, 1:2]
colnames(sensor_data) <- c("sector", "sensor")
#required format: sector, sensor
t1 <- Sys.time()
TR_res <- TR_data_proc(lc_data = lc_data, pe_data = pe_data,
wth_data = wth_data, sensor_data = sensor_data,
lastDate = NULL, skew_test = FALSE,
LAI_correction = FALSE)
lc_data$timestamp<-lubridate::dmy_hm(lc_data$timestamp)
lc_data$timestamp<-lubridate::ymd_hms(lc_data$timestamp)
lc_data$timestamp<-as.character(lc_data$timestamp)
lc_data$timestamp<-lubridate::dmy_hm(lc_data$timestamp)
lc_data$timestamp<-lubridate::ymd_hms(lc_data$timestamp)
# LC data !! I don't have the same format as the template. Replace as the example !!
#lc_data <- lc_data[lc_data$variable == "Weight.g", ] ###!! irrigation and weight are not mixed in variable anymore !!
lc_data<-cbind(lc_data_s$unit, lc_data_s$sensor, NA, lc_data_s$timestamp, lc_data_s$Weight.g, lc_data_s$g_alias, lc_data_s$genotype)
lc_data<-as.data.frame(lc_data)
colnames(lc_data)<-c("unit","sensor", "variable","timestamp","value","g_alias","genotype")
lc_data$variable<-"Weight g" ##same as example
lc_data$treatment<-lc_data_s$treatment
lc_data <- lc_data %>% rename(`Mass..g` = variable, sector = unit)
lc_col_name <- c("sector", "genotype", "g_alias", "treatment", "timestamp", "Mass..g")
lc_data <- lc_data[, lc_col_name]
lc_data$timestamp<-lubridate::ymd_hms(lc_data$timestamp)
pe_data$timestamp<-lubridate::ymd_hms(pe_data$timestamp)
TR_res <- TR_data_proc(lc_data = lc_data, pe_data = pe_data,
wth_data = wth_data, sensor_data = sensor_data,
lastDate = NULL, skew_test = FALSE,
LAI_correction = FALSE)
TR_data_proc
TR_data_proc
