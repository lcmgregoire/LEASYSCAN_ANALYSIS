wthr.DFagg15min$Date
wthr.DFagg15min$TS <- lubridate::hm(wthr.DFagg15min$TS) #Format here
wthr.DFagg15min <- IRD_data_Exp_NEW$climate
wthr.DFagg15min <- IRD_data_Exp_NEW$climate
wthr.DFagg15min$Date <- lubridate::ymd(wthr.DFagg15min$Date) #Format here
wthr.DFagg15min$TS <- lubridate::hms(wthr.DFagg15min$TS) #Format here
wthr.DFagg15min <- wthr.DFagg15min[wthr.DFagg15min$Date>=firstDate &
wthr.DFagg15min$Date<=lastDate,]
rn <- which(is.na(wthr.DFagg15min$Date)==TRUE)
wthr.DFagg15min$TS <- ymd_hm(paste0(as.character(wthr.DFagg15min$Date),
wthr.DFagg15min$TS))
wthr.DFagg15min <- IRD_data_Exp_NEW$climate
wthr.DFagg15min$Date <- lubridate::ymd(wthr.DFagg15min$Date) #Format here
as.character(wthr.DFagg15min$Date)
wthr.DFagg15min$TS
wthr.DFagg15min$TS <- paste0(as.character(wthr.DFagg15min$Date),
wthr.DFagg15min$TS)
wthr.DFagg15min$TS <- ymd_hm(paste0(wthr.DFagg15min$TS))
wthr.DFagg15min <- IRD_data_Exp_NEW$climate
wthr.DFagg15min <- IRD_data_Exp_NEW$climate
wthr.DFagg15min$Date <- lubridate::ymd(wthr.DFagg15min$Date) #Format here
wthr.DFagg15min$TS <- paste0(as.character(wthr.DFagg15min$Date), " ",
wthr.DFagg15min$TS)
wthr.DFagg15min$TS <- ymd_hms(wthr.DFagg15min$TS)
wthr.DFagg15min <- wthr.DFagg15min[,-1]
# Create empty base matrix for weather variables
end.seq_hhmm  <- '23:45'
if (seq_by == '15'){
end.seq_hhmm  <- '23:45'
} else if(seq_by == '30'){
end.seq_hhmm  <- '23:30'
} else if(seq_by == '45'){
end.seq_hhmm  <- '23:15'
} else if(seq_by == '60'){
end.seq_hhmm  <- '23:00'}
TS_base<-as.data.frame(as.character(seq(ymd_hm(paste0(firstDate," ",'00:00')),
ymd_hm(paste0(lastDate," ",end.seq_hhmm)),
by = paste0(seq_by, " ", "mins"))))
names(TS_base)[1]<-c("int.val")
TS_base$time <- strftime(TS_base$int.val, format="%H:%M:%S", tz="UTC")
hms.ts.base<-unique(TS_base$time)
names(hms.ts.base)<-c("time")
print("Climate matrix timestamp mapping status")
i<-nrow(wthr.DFagg15min)
pbar <- create_progress_bar('text')
pbar$init(i)
for(i in 1:nrow(wthr.DFagg15min))
{
if(! wthr.DFagg15min$TS[i] %in% hms.ts.base)
{
j <- which.min(abs(chron(times=hms.ts.base) -
chron::chron(times=format(wthr.DFagg15min$TS[i],format = "%H:%M:%S")))) # find which value in ts-base-vector is nearest to each-DP
# assign the nearest ts-base-vector value to that DP
dd <- date(wthr.DFagg15min$TS[i])
wthr.DFagg15min$TS[i] <- ymd_hms(paste0(dd, TS_base$time[j]))}
pbar$step()
}
# TS_ALL<-as.data.frame(as.character(seq(ymd_hm(paste0(firstDate," ",'00:00')),
#                                        ymd_hm(paste0(lastDate," ",'23:45')), by = '15 mins')))
TS_ALL<-as.data.frame(as.character(seq(ymd_hm(paste0(firstDate," ",'00:00')),
ymd_hm(paste0(lastDate," ",end.seq_hhmm)),
by = paste0(seq_by, " mins"))))
names(TS_ALL)[1]<-c("TS.n") # MUST be the same as in original data set m.lc.df
TS_ALL$TS.n <- ymd_hms(TS_ALL$TS.n)
Wthr.MAT <- as.data.frame(matrix(nrow = length(TS_ALL$TS.n),
ncol = ncol(wthr.DFagg15min)))
Wthr.MAT[ ,1] <- TS_ALL$TS.n; names(Wthr.MAT)[1] <- "TS"
colnames(Wthr.MAT)[2:ncol(Wthr.MAT)] <- names(wthr.DFagg15min)[2:ncol(wthr.DFagg15min)]
df <- merge(x = wthr.DFagg15min, y = Wthr.MAT, by = "TS", all = TRUE) # perform outer join to merge by id=TS.n
df.new <- df[,1:6]; names(df.new)[2:6]<-names(wthr.DFagg15min)[2:6]
df.new <- df.new[!duplicated(df.new[c("TS")]),]
etrDTS <- as.data.frame(colnames(ETr_Meta_ERRsec.rmvd)[7:ncol(ETr_Meta_ERRsec.rmvd)])
names(etrDTS) <- "TS"
etrDTS$TS <- ymd_hms(etrDTS$TS)
df.new <- df.new[df.new$TS %in% etrDTS$TS, ] # subset after outer join to ensure that NAs don't add extra rows
# Pre-process weather
df.new$Temp <- if(sum(is.na(df.new$Temp))>0){df.new$Temp<-na.aggregate.default(df.new$Temp)}
df.new$RH <- if(sum(is.na(df.new$RH))>0){df.new$RH<-na.aggregate.default(df.new$RH)}
df.new$SR <- if(sum(is.na(df.new$SR))>0){df.new$SR<-na.aggregate.default(df.new$SR)}
df.new$WS <- if(sum(is.na(df.new$WS))>0){df.new$WS<-na.aggregate.default(df.new$WS)}
wthr.DFagg15min.filt <- df.new
# Compute VPD and insert into the weather DF #
SVP <- 610.7*(10^(7.5*wthr.DFagg15min.filt[ ,2]/(237.3+wthr.DFagg15min.filt[ ,2])))
VPD <- ((1 - (wthr.DFagg15min.filt[ ,3]/100))*SVP)/1000
wthr.DFagg15min.filt[ ,4] <- VPD
# Compute VPD and insert into the weather DF #
SVP <- 610.7*(10^(7.5*wthr.DFagg15min.filt[ ,2]/(237.3+wthr.DFagg15min.filt[ ,2])))
VPD <- ((1 - (wthr.DFagg15min.filt[ ,3]/100))*SVP)/1000
wthr.DFagg15min.filt <- df.new
df.new <- df.new[df.new$TS %in% etrDTS$TS, ] # subset after outer join to ensure that NAs don't add extra rows
df <- merge(x = wthr.DFagg15min, y = Wthr.MAT, by = "TS", all = TRUE) # perform outer join to merge by id=TS.n
df.new <- df[,1:6]; names(df.new)[2:6]<-names(wthr.DFagg15min)[2:6]
df.new <- df.new[!duplicated(df.new[c("TS")]),]
etrDTS <- as.data.frame(colnames(ETr_Meta_ERRsec.rmvd)[7:ncol(ETr_Meta_ERRsec.rmvd)])
names(etrDTS) <- "TS"
etrDTS$TS <- ymd_hms(etrDTS$TS)
ETr_Meta_ERRsec.rmvd
df.new <- df.new[df.new$TS %in% etrDTS$TS, ] # subset after outer join to ensure that NAs don't add extra rows
# Pre-process weather
df.new$Temp <- if(sum(is.na(df.new$Temp))>0){df.new$Temp<-na.aggregate.default(df.new$Temp)}
df.new$RH <- if(sum(is.na(df.new$RH))>0){df.new$RH<-na.aggregate.default(df.new$RH)}
df.new$RH <- if(sum(is.na(df.new$RH))>0){df.new$RH<-na.aggregate.default(df.new$RH)}
df.new$SR <- if(sum(is.na(df.new$SR))>0){df.new$SR<-na.aggregate.default(df.new$SR)}
df.new$WS <- if(sum(is.na(df.new$WS))>0){df.new$WS<-na.aggregate.default(df.new$WS)}
df <- merge(x = wthr.DFagg15min, y = Wthr.MAT, by = "TS", all = TRUE) # perform outer join to merge by id=TS.n
df.new <- df[,1:6]; names(df.new)[2:6]<-names(wthr.DFagg15min)[2:6]
df.new <- df.new[!duplicated(df.new[c("TS")]),]
etrDTS <- as.data.frame(colnames(ETr_Meta_ERRsec.rmvd)[7:ncol(ETr_Meta_ERRsec.rmvd)])
names(etrDTS) <- "TS"
etrDTS$TS <- ymd_hms(etrDTS$TS)
df.new <- df.new[df.new$TS %in% etrDTS$TS, ]
View(df.new)
is.na(df.new$Temp)
is.na(df.new$RH)
wthr.DFagg15min.filt <- df.new
# Compute VPD and insert into the weather DF #
SVP <- 610.7*(10^(7.5*wthr.DFagg15min.filt[ ,2]/(237.3+wthr.DFagg15min.filt[ ,2])))
VPD <- ((1 - (wthr.DFagg15min.filt[ ,3]/100))*SVP)/1000
wthr.DFagg15min.filt
wthr.DFagg15min.filt[ ,3]
(wthr.DFagg15min.filt[ ,3]/100)
SVP
VPD <- ((1 - (wthr.DFagg15min.filt[ ,3]/100))*SVP)/1000
wthr.DFagg15min.filt[ ,4] <- VPD
et.obs <- ETr_Meta_ERRsec.rmvd
# Calculate Penman Monteith ET #
wthr.df1 <- calculateETref(x=wthr.DFagg15min.filt)
wthr.ETref.df <- as.data.frame(wthr.df1)
empty.MAT <- matrix(nrow = 8,
ncol = (ncol(et.obs)-nrow(wthr.df1)))
# select columns "Temp"  "RH"    "VPD"   "SR"    "WS"    "Tmax"  "Tmin"  "ETref"
empty.MAT.wthr.ETref <- as.data.frame(cbind(empty.MAT, t(wthr.ETref.df[,c(2:6, 9:11)])))
colnames(empty.MAT.wthr.ETref) <- colnames(et.obs)
wthr.ETref.ETobs <- as.data.frame(rbind(empty.MAT.wthr.ETref, et.obs))
# Remove irrigation dates #
file.colnms <- colnames(wthr.ETref.ETobs)
wthr.ETref.ETobs <- wthr.ETref.ETobs[ ,!substr(file.colnms,1,10) %in% irrg.dts]
write.csv(wthr.ETref.ETobs, paste0(opPATH, "OP-8","_wthr.ETref.ETobs.csv"))
##### Feature Extraction of RAW Transpiration Data #####
# featuresRES <- getFeatures(x = raw.trans)
featuresRES <- getFeatures(x = wthr.ETref.ETobs)
allFeatures <- featuresRES$allFeatures
unq.dts <- unique(substr(colnames(wthr.ETref.ETobs)[-c(1:6)], 1, 10))
# create H2 dataframe to store H2 est. of each feature for each day
F.He <- as.data.frame(matrix(NA, nrow = length(unq.dts), ncol = 15)) # Date-ROW, feature-COL
colnames(F.He) <- c("maxET", "slope.maxET-6", "slope.07-maxET", "slope.00-07", "slope.19-23:45", "curvmaxET",
"total.auc","auc.10-15", "sd.10-15", "auc.prop.10-15", "auc.07-19", "sd.07-19",
"auc.prop.07-19", "auc.night", "cos.sim.index")
rownames(F.He) <- unq.dts
featureHeRES <- getFeatureHe(x = allFeatures, y = wthr.ETref.ETobs, d = unq.dts, p =opPATH.raw)
write.csv(featureHeRES, paste0(opPATH, "rawETr_featureH2.csv"))
## Prepare data for 'each feature'
maxET <- as.data.frame(matrix(nr = (nrow(wthr.ETref.ETobs)-8), nc = length(unq.dts)))
slope.maxET.6 <- as.data.frame(matrix(nr = (nrow(wthr.ETref.ETobs)-8), nc = length(unq.dts)))
slope.07maxET <- as.data.frame(matrix(nr = (nrow(wthr.ETref.ETobs)-8), nc = length(unq.dts)))
slope.00.07 <- as.data.frame(matrix(nr = (nrow(wthr.ETref.ETobs)-8), nc = length(unq.dts)))
slope.19.2345 <- as.data.frame(matrix(nr = (nrow(wthr.ETref.ETobs)-8), nc = length(unq.dts)))
curvmaxET <- as.data.frame(matrix(nr = (nrow(wthr.ETref.ETobs)-8), nc = length(unq.dts)))
total.auc <- as.data.frame(matrix(nr = (nrow(wthr.ETref.ETobs)-8), nc = length(unq.dts)))
auc.10.15 <- as.data.frame(matrix(nr = (nrow(wthr.ETref.ETobs)-8), nc = length(unq.dts)))
sd.10.15 <- as.data.frame(matrix(nr = (nrow(wthr.ETref.ETobs)-8), nc = length(unq.dts)))
auc.prop.10.15 <- as.data.frame(matrix(nr = (nrow(wthr.ETref.ETobs)-8), nc = length(unq.dts)))
auc.07.19 <- as.data.frame(matrix(nr = (nrow(wthr.ETref.ETobs)-8), nc = length(unq.dts)))
sd.07.19 <- as.data.frame(matrix(nr = (nrow(wthr.ETref.ETobs)-8), nc = length(unq.dts)))
auc.prop.07.19 <- as.data.frame(matrix(nr = (nrow(wthr.ETref.ETobs)-8), nc = length(unq.dts)))
auc.night <- as.data.frame(matrix(nr = (nrow(wthr.ETref.ETobs)-8), nc = length(unq.dts)))
cos.sim.index <- as.data.frame(matrix(nr = (nrow(wthr.ETref.ETobs)-8), nc = length(unq.dts)))
for (j in 1:(nrow(wthr.ETref.ETobs)-8)){
# "maxET", "slope.maxET-6", "slope.07-maxET", "slope.00-07", "slope.19-23:45", "curvmaxET",
# "total.auc","auc.10-15", "sd.10-15", "auc.prop.10-15", "auc.07-19", "sd.07-19",
# "auc.prop.07-19", "auc.night", "cos.sim.index"
for(d in 1:length(unq.dts))
{maxET[j, d] <- data.frame(allFeatures[[j]][d, 1])
slope.maxET.6[j, d] <- data.frame(allFeatures[[j]][d, 2])
slope.07maxET[j, d] <- data.frame(allFeatures[[j]][d, 3])
slope.00.07 [j, d] <- data.frame(allFeatures[[j]][d, 4])
slope.19.2345[j, d] <- data.frame(allFeatures[[j]][d, 5])
curvmaxET[j, d] <- data.frame(allFeatures[[j]][d, 6])
total.auc[j, d] <- data.frame(allFeatures[[j]][d, 7])
auc.10.15[j, d] <- data.frame(allFeatures[[j]][d, 8])
sd.10.15 [j, d] <- data.frame(allFeatures[[j]][d, 9])
auc.prop.10.15[j, d] <- data.frame(allFeatures[[j]][d, 10])
auc.07.19[j, d] <- data.frame(allFeatures[[j]][d, 11])
sd.07.19[j, d] <- data.frame(allFeatures[[j]][d, 12])
auc.prop.07.19[j, d] <- data.frame(allFeatures[[j]][d, 13])
auc.night [j, d] <- data.frame(allFeatures[[j]][d, 14])
cos.sim.index[j, d] <- data.frame(allFeatures[[j]][d, 15])
}
}
names(maxET)=names(slope.maxET.6)=names(slope.07maxET)=names(slope.00.07)=names(slope.19.2345)<-unq.dts
names(curvmaxET)=names(total.auc)=names(auc.10.15)=names(sd.10.15)=names(auc.prop.10.15)<-unq.dts
names(auc.07.19)=names(sd.07.19)=names(auc.prop.07.19)=names(auc.night)=names(cos.sim.index)<-unq.dts
write.csv(as.data.frame(cbind(wthr.ETref.ETobs[9:nrow(wthr.ETref.ETobs), 1:6], maxET)),
paste0(opPATH.raw, "maxET.csv"))
write.csv(as.data.frame(cbind(wthr.ETref.ETobs[9:nrow(wthr.ETref.ETobs), 1:6], slope.maxET.6)),
paste0(opPATH.raw, "slope.maxET.6.csv"))
write.csv(as.data.frame(cbind(wthr.ETref.ETobs[9:nrow(wthr.ETref.ETobs), 1:6], slope.00.07)),
paste0(opPATH.raw, "slope.00.07.csv"))
write.csv(as.data.frame(cbind(wthr.ETref.ETobs[9:nrow(wthr.ETref.ETobs), 1:6], slope.07maxET)),
paste0(opPATH.raw, "slope.07maxET.csv"))
write.csv(as.data.frame(cbind(wthr.ETref.ETobs[9:nrow(wthr.ETref.ETobs), 1:6], slope.19.2345)),
paste0(opPATH.raw, "slope.19.2345.csv"))
write.csv(as.data.frame(cbind(wthr.ETref.ETobs[9:nrow(wthr.ETref.ETobs), 1:6], curvmaxET)),
paste0(opPATH.raw, "curvmaxET.csv"))
write.csv(as.data.frame(cbind(wthr.ETref.ETobs[9:nrow(wthr.ETref.ETobs), 1:6], total.auc)),
paste0(opPATH.raw, "total.auc.csv"))
write.csv(as.data.frame(cbind(wthr.ETref.ETobs[9:nrow(wthr.ETref.ETobs), 1:6], auc.10.15)),
paste0(opPATH.raw, "auc.10.15.csv"))
write.csv(as.data.frame(cbind(wthr.ETref.ETobs[9:nrow(wthr.ETref.ETobs), 1:6], sd.10.15)),
paste0(opPATH.raw, "sd.10.15.csv"))
write.csv(as.data.frame(cbind(wthr.ETref.ETobs[9:nrow(wthr.ETref.ETobs), 1:6], auc.prop.10.15)),
paste0(opPATH.raw, "auc.prop.10.15.csv"))
write.csv(as.data.frame(cbind(wthr.ETref.ETobs[9:nrow(wthr.ETref.ETobs), 1:6], auc.07.19)),
paste0(opPATH.raw, "auc.07.19.csv"))
write.csv(as.data.frame(cbind(wthr.ETref.ETobs[9:nrow(wthr.ETref.ETobs), 1:6], sd.07.19)),
paste0(opPATH.raw, "sd.07.19.csv"))
write.csv(as.data.frame(cbind(wthr.ETref.ETobs[9:nrow(wthr.ETref.ETobs), 1:6], auc.prop.07.19)),
paste0(opPATH.raw, "auc.prop.07.19.csv"))
write.csv(as.data.frame(cbind(wthr.ETref.ETobs[9:nrow(wthr.ETref.ETobs), 1:6], auc.night)),
paste0(opPATH.raw, "auc.night.csv"))
write.csv(as.data.frame(cbind(wthr.ETref.ETobs[9:nrow(wthr.ETref.ETobs), 1:6], cos.sim.index)),
paste0(opPATH.raw, "cos.sim.index.csv"))
###### Stage III: Generate smooth ETr and obtain smooth Tr features ######
# ETr smoothing
ETr_smthIP <- wthr.ETref.ETobs
subs.d.imp <- ETr_smthIP[9:nrow(ETr_smthIP),
7:ncol(ETr_smthIP)]
smoothETrMAT <- smoothETr(x = subs.d.imp)
ETr_smoothFILE <- ETr_smthIP
ETr_smoothFILE[9:nrow(ETr_smoothFILE),
7:ncol(ETr_smoothFILE)] <- smoothETrMAT
write.csv(ETr_smoothFILE, paste0(opPATH, "OP-9","_ETr_smth.csv"))
### Feature Extraction of SMOOTH Transpiration Data ###
featuresRES <- getFeatures(x = ETr_smoothFILE)
allFeatures <- featuresRES$allFeatures
# create H2 dataframe to store H2 est. of each feature for each day
F.He <- as.data.frame(matrix(NA, nrow = length(unq.dts), ncol = 15)) # Date-ROW, feature-COL
colnames(F.He) <- c("maxET", "slope.maxET-6", "slope.07-maxET", "slope.00-07", "slope.19-23:45", "curvmaxET",
"total.auc","auc.10-15", "sd.10-15", "auc.prop.10-15", "auc.07-19", "sd.07-19",
"auc.prop.07-19", "auc.night", "cos.sim.index")
rownames(F.He) <- unq.dts
featureHeRES <- getFeatureHe(x = allFeatures, y = ETr_smoothFILE, d = unq.dts, p = opPATH.smth)
write.csv(featureHeRES, paste0(opPATH, "smthETr_featureH2.csv"))
## Prepare data for 'each feature'
maxET <- as.data.frame(matrix(nr = (nrow(ETr_smoothFILE)-8), nc = length(unq.dts)))
slope.maxET.6 <- as.data.frame(matrix(nr = (nrow(ETr_smoothFILE)-8), nc = length(unq.dts)))
slope.07maxET <- as.data.frame(matrix(nr = (nrow(ETr_smoothFILE)-8), nc = length(unq.dts)))
slope.00.07 <- as.data.frame(matrix(nr = (nrow(ETr_smoothFILE)-8), nc = length(unq.dts)))
slope.19.2345 <- as.data.frame(matrix(nr = (nrow(ETr_smoothFILE)-8), nc = length(unq.dts)))
curvmaxET <- as.data.frame(matrix(nr = (nrow(ETr_smoothFILE)-8), nc = length(unq.dts)))
total.auc <- as.data.frame(matrix(nr = (nrow(ETr_smoothFILE)-8), nc = length(unq.dts)))
auc.10.15 <- as.data.frame(matrix(nr = (nrow(ETr_smoothFILE)-8), nc = length(unq.dts)))
sd.10.15 <- as.data.frame(matrix(nr = (nrow(ETr_smoothFILE)-8), nc = length(unq.dts)))
auc.prop.10.15 <- as.data.frame(matrix(nr = (nrow(ETr_smoothFILE)-8), nc = length(unq.dts)))
auc.07.19 <- as.data.frame(matrix(nr = (nrow(ETr_smoothFILE)-8), nc = length(unq.dts)))
sd.07.19 <- as.data.frame(matrix(nr = (nrow(ETr_smoothFILE)-8), nc = length(unq.dts)))
auc.prop.07.19 <- as.data.frame(matrix(nr = (nrow(ETr_smoothFILE)-8), nc = length(unq.dts)))
auc.night <- as.data.frame(matrix(nr = (nrow(ETr_smoothFILE)-8), nc = length(unq.dts)))
cos.sim.index <- as.data.frame(matrix(nr = (nrow(ETr_smoothFILE)-8), nc = length(unq.dts)))
for (j in 1:(nrow(ETr_smoothFILE)-8)){
# "maxET", "slope.maxET-6", "slope.07-maxET", "slope.00-07", "slope.19-23:45", "curvmaxET",
# "total.auc","auc.10-15", "sd.10-15", "auc.prop.10-15", "auc.07-19", "sd.07-19",
# "auc.prop.07-19", "auc.night", "cos.sim.index"
for(d in 1:length(unq.dts))
{maxET[j, d] <- data.frame(allFeatures[[j]][d, 1])
slope.maxET.6[j, d] <- data.frame(allFeatures[[j]][d, 2])
slope.07maxET[j, d] <- data.frame(allFeatures[[j]][d, 3])
slope.00.07 [j, d] <- data.frame(allFeatures[[j]][d, 4])
slope.19.2345[j, d] <- data.frame(allFeatures[[j]][d, 5])
curvmaxET[j, d] <- data.frame(allFeatures[[j]][d, 6])
total.auc[j, d] <- data.frame(allFeatures[[j]][d, 7])
auc.10.15[j, d] <- data.frame(allFeatures[[j]][d, 8])
sd.10.15 [j, d] <- data.frame(allFeatures[[j]][d, 9])
auc.prop.10.15[j, d] <- data.frame(allFeatures[[j]][d, 10])
auc.07.19[j, d] <- data.frame(allFeatures[[j]][d, 11])
sd.07.19[j, d] <- data.frame(allFeatures[[j]][d, 12])
auc.prop.07.19[j, d] <- data.frame(allFeatures[[j]][d, 13])
auc.night [j, d] <- data.frame(allFeatures[[j]][d, 14])
cos.sim.index[j, d] <- data.frame(allFeatures[[j]][d, 15])
}
}
names(maxET)=names(slope.maxET.6)=names(slope.07maxET)=names(slope.00.07)=names(slope.19.2345)<-unq.dts
names(curvmaxET)=names(total.auc)=names(auc.10.15)=names(sd.10.15)=names(auc.prop.10.15)<-unq.dts
names(auc.07.19)=names(sd.07.19)=names(auc.prop.07.19)=names(auc.night)=names(cos.sim.index)<-unq.dts
write.csv(as.data.frame(cbind(ETr_smoothFILE[9:nrow(ETr_smoothFILE), 1:6], maxET)),
paste0(opPATH.smth, "maxET.csv"))
write.csv(as.data.frame(cbind(ETr_smoothFILE[9:nrow(ETr_smoothFILE), 1:6], slope.maxET.6)),
paste0(opPATH.smth, "slope.maxET.6.csv"))
write.csv(as.data.frame(cbind(ETr_smoothFILE[9:nrow(ETr_smoothFILE), 1:6], slope.00.07)),
paste0(opPATH.smth, "slope.00.07.csv"))
write.csv(as.data.frame(cbind(ETr_smoothFILE[9:nrow(ETr_smoothFILE), 1:6], slope.07maxET)),
paste0(opPATH.smth, "slope.07maxET.csv"))
write.csv(as.data.frame(cbind(ETr_smoothFILE[9:nrow(ETr_smoothFILE), 1:6], slope.19.2345)),
paste0(opPATH.smth, "slope.19.2345.csv"))
write.csv(as.data.frame(cbind(ETr_smoothFILE[9:nrow(ETr_smoothFILE), 1:6], curvmaxET)),
paste0(opPATH.smth, "curvmaxET.csv"))
write.csv(as.data.frame(cbind(ETr_smoothFILE[9:nrow(ETr_smoothFILE), 1:6], total.auc)),
paste0(opPATH.smth, "total.auc.csv"))
write.csv(as.data.frame(cbind(ETr_smoothFILE[9:nrow(ETr_smoothFILE), 1:6], auc.10.15)),
paste0(opPATH.smth, "auc.10.15.csv"))
write.csv(as.data.frame(cbind(ETr_smoothFILE[9:nrow(ETr_smoothFILE), 1:6], sd.10.15)),
paste0(opPATH.smth, "sd.10.15.csv"))
write.csv(as.data.frame(cbind(ETr_smoothFILE[9:nrow(ETr_smoothFILE), 1:6], auc.prop.10.15)),
paste0(opPATH.smth, "auc.prop.10.15.csv"))
write.csv(as.data.frame(cbind(ETr_smoothFILE[9:nrow(ETr_smoothFILE), 1:6], auc.07.19)),
paste0(opPATH.smth, "auc.07.19.csv"))
write.csv(as.data.frame(cbind(ETr_smoothFILE[9:nrow(ETr_smoothFILE), 1:6], sd.07.19)),
paste0(opPATH.smth, "sd.07.19.csv"))
write.csv(as.data.frame(cbind(ETr_smoothFILE[9:nrow(ETr_smoothFILE), 1:6], auc.prop.07.19)),
paste0(opPATH.smth, "auc.prop.07.19.csv"))
write.csv(as.data.frame(cbind(ETr_smoothFILE[9:nrow(ETr_smoothFILE), 1:6], auc.night)),
paste0(opPATH.smth, "auc.night.csv"))
write.csv(as.data.frame(cbind(ETr_smoothFILE[9:nrow(ETr_smoothFILE), 1:6], cos.sim.index)),
paste0(opPATH.smth, "cos.sim.index.csv"))
ets = ETr_smoothFILE
laidf = read.csv("./data/PERIODE1-22-09-01-10/climate_PERIODE1.csv")
#laidf <- na.approx(laidf[,9:ncol(laidf)])
# Get unique sector names
ets.sec <- unique(ets$old_unit)
lai_sec <- laidf$old_unit
laidf = read.csv("./data/PERIODE1-22-09-01-10/climate_PERIODE1.csv")
#laidf <- na.approx(laidf[,9:ncol(laidf)])
# Get unique sector names
ets.sec <- unique(ets$old_unit)
lai_sec <- laidf$old_unit
View(laidf)
laidf = read.csv("./data/PERIODE1-22-09-01-10/climate_PERIODE1.csv", sep = ";")
laidf = read.csv("./data/PERIODE1-22-09-01-10/climate_PERIODE1.csv", sep = ";")
#laidf <- na.approx(laidf[,9:ncol(laidf)])
# Get unique sector names
ets.sec <- unique(ets$old_unit)
lai_sec <- laidf$old_unit
# Convert column names to Date format
colnames(laidf)[9:ncol(laidf)] <- sub("X","",colnames(laidf)[9:ncol(laidf)])
lai_dts <- colnames(laidf)[9:ncol(laidf)]
lai_dtsseq <- mdy(lai_dts)
laidf = read.csv("./data/PERIODE1-22-09-01-10/climate_PERIODE1.csv", sep = ";")
#laidf <- na.approx(laidf[,9:ncol(laidf)])
# Get unique sector names
ets.sec <- unique(ets$old_unit)
lai_sec <- laidf$old_unit
colnames(laidf)[9:ncol(laidf)] <- sub("X","",colnames(laidf)[9:ncol(laidf)])
lai_dts <- colnames(laidf)[9:ncol(laidf)]
lai_dtsseq <- dmy(lai_dts)
lai_dts <- colnames(laidf)[9:ncol(laidf)]
lai_dtsseq <- dmy_hm(lai_dts)
colnames(laidf)[9:ncol(laidf)]<-as.character(lai_dtsseq)
# Extract ETr part
etsMat <- ets[9:nrow(ets), c(1,7:ncol(ets))]
trMat <- etsMat # TR placeholder matrix
# TR calculation
for(i in 1:nrow(etsMat)) {
print(i)
etsTmp <- etsMat[i,-1]
etsTmpMat <- matrix(etsTmp, nrow = length(etsTmp)/length(unq.dts))
for(j in 1:length(unq.dts)){
print(j)
d_j <- unq.dts[j]
sec_j <- etsMat[i,1]
lai_j <- laidf[laidf$unit==sec_j, d_j]
if(is.na(lai_j)==TRUE){
lai_j == 0.0
etsTmpMat[,j] <- unlist(etsTmpMat[,j])/lai_j
}else{
etsTmpMat[,j] <- unlist(etsTmpMat[,j])/lai_j
}
}
trMat[i,2:ncol(trMat)]<-c(etsTmpMat)
}
i=1
print(i)
etsTmp <- etsMat[i,-1]
etsTmpMat <- matrix(etsTmp, nrow = length(etsTmp)/length(unq.dts))
length(unq.dts)
j=1
print(j)
d_j <- unq.dts[j]
sec_j <- etsMat[i,1]
lai_j <- laidf[laidf$unit==sec_j, d_j]
is.na(lai_j)
lai_j
(is.na(lai_j)==TRUE)
laidf$unit
sec_j
laidf$unit==sec_j
d_j
lai_j <- laidf[laidf$unit==sec_j, d_j]
laidf$unit==sec_j
etsTmpMat[,j] <- unlist(etsTmpMat[,j])/lai_j
etsTmpMat[,j] <- unlist(etsTmpMat[,j])/lai_j
for(j in 1:length(unq.dts)){
print(j)
d_j <- unq.dts[j]
sec_j <- etsMat[i,1]
lai_j <- laidf[laidf$unit==sec_j, d_j]
if(is.na(lai_j)==TRUE){
lai_j == 0.0
etsTmpMat[,j] <- unlist(etsTmpMat[,j])/lai_j
}else{
etsTmpMat[,j] <- unlist(etsTmpMat[,j])/lai_j
}
}
unq.dts
d_j <- unq.dts[j]
d_j
sec_j <- etsMat[i,1]
sec_j
lai_j <- laidf[laidf$unit==sec_j, d_j]
lai_j
laidf
head(laidf)
head(laidf$unit)
laidf$unit==sec_j
# TR calculation
for(i in 1:nrow(etsMat)) {
print(i)
etsTmp <- etsMat[i,-1]
etsTmpMat <- matrix(etsTmp, nrow = length(etsTmp)/length(unq.dts))
for(j in 1:length(unq.dts)){
print(j)
d_j <- unq.dts[j]
sec_j <- etsMat[i,1]
lai_j <- laidf[laidf$unit==sec_j, d_j]
if(is.na(lai_j)==TRUE){
lai_j == 0.0
etsTmpMat[,j] <- unlist(etsTmpMat[,j])/lai_j
}else{
etsTmpMat[,j] <- unlist(etsTmpMat[,j])/lai_j
}
}
trMat[i,2:ncol(trMat)]<-c(etsTmpMat)
}
print(i)
etsTmp <- etsMat[i,-1]
etsTmpMat <- matrix(etsTmp, nrow = length(etsTmp)/length(unq.dts))
laidf
head(laidf)
laidf = read.csv("./data/PERIODE1-22-09-01-10/climate_PERIODE1.csv", sep = ";")
ets.sec <- unique(ets$old_unit)
lai_sec <- laidf$old_unit
lai_sec
ets.sec
# Convert column names to Date format
colnames(laidf)[9:ncol(laidf)] <- sub("X","",colnames(laidf)[9:ncol(laidf)])
laidf<-laidf[,28]
laidf = read.csv("./data/PERIODE1-22-09-01-10/climate_PERIODE1.csv", sep = ";")
# Get unique sector names
ets.sec <- unique(ets$old_unit)
lai_sec <- laidf$old_unit
laidf[,28]
laidf[28,]
laidf[,28]
laidf[28]
laidf[,29]
laidf=laidf[,29]
laidf = read.csv("./data/PERIODE1-22-09-01-10/LA_PERIODE1.csv", sep = ";")
ets.sec <- unique(ets$old_unit)
lai_sec <- laidf$old_unit
# Convert column names to Date format
colnames(laidf)[9:ncol(laidf)] <- sub("X","",colnames(laidf)[9:ncol(laidf)])
lai_dts <- colnames(laidf)[9:ncol(laidf)]
lai_dtsseq <- dmy_hm(lai_dts)
colnames(laidf)[9:ncol(laidf)]<-as.character(lai_dtsseq)
# Extract ETr part
etsMat <- ets[9:nrow(ets), c(1,7:ncol(ets))]
trMat <- etsMat # TR placeholder matrix
# TR calculation
for(i in 1:nrow(etsMat)) {
print(i)
etsTmp <- etsMat[i,-1]
etsTmpMat <- matrix(etsTmp, nrow = length(etsTmp)/length(unq.dts))
for(j in 1:length(unq.dts)){
print(j)
d_j <- unq.dts[j]
sec_j <- etsMat[i,1]
lai_j <- laidf[laidf$unit==sec_j, d_j]
if(is.na(lai_j)==TRUE){
lai_j == 0.0
etsTmpMat[,j] <- unlist(etsTmpMat[,j])/lai_j
}else{
etsTmpMat[,j] <- unlist(etsTmpMat[,j])/lai_j
}
}
trMat[i,2:ncol(trMat)]<-c(etsTmpMat)
}
print(i)
etsTmp <- etsMat[i,-1]
nrow(etsMat)
etsTmpMat <- matrix(etsTmp, nrow = length(etsTmp)/length(unq.dts))
length(etsTmp)
length(unq.dts)
etsTmpMat <- matrix(etsTmp, nrow = length(etsTmp)/length(unq.dts))
print(j)
d_j <- unq.dts[j]
sec_j <- etsMat[i,1]
lai_j <- laidf[laidf$unit==sec_j, d_j]
TR_smoothFILE <- ETr_smoothFILE
TR_smoothFILE[9:nrow(TR_smoothFILE),
7:ncol(TR_smoothFILE)] <- trMat[ , 2:ncol(trMat)]
write.csv(TR_smoothFILE, paste0(opPATH, "OP-10_TR_smth.csv"))
### Feature Extraction of SMOOTH TR Data ###
featuresRES <- getFeatures(x = TR_smoothFILE)
allFeatures <- featuresRES$allFeatures
# create H2 dataframe to store H2 est. of each feature for each day
F.He <- as.data.frame(matrix(NA, nrow = length(unq.dts), ncol = 15)) # Date-ROW, feature-COL
colnames(F.He) <- c("maxET", "slope.maxET-6", "slope.07-maxET", "slope.00-07", "slope.19-23:45", "curvmaxET",
"total.auc","auc.10-15", "sd.10-15", "auc.prop.10-15", "auc.07-19", "sd.07-19",
"auc.prop.07-19", "auc.night", "cos.sim.index")
rownames(F.He) <- unq.dts
featureHeRES <- getFeatureHe(x = allFeatures, y = ETr_smoothFILE,
d = unq.dts, p = opPATH.smthTR)
write.csv(featureHeRES, paste0(opPATH, "smthTR_featureH2.csv"))
